public with sharing class AssetCheckFSlController {

    @AuraEnabled (cacheable=false)
    public static String fetchAssetDetails(string wrapperRecordString) {
        try{
            responseWrapper wrapperRecord = (responseWrapper)JSON.deserialize(wrapperRecordString, responseWrapper.class);
           
            List<Asset> assetRecord = new List<Asset>();

            WorkOrder workOrderRecord  = [SELECT Id, Product_Sub_Family__c, CaseId, Serial_Number__c, AccountId,ContactId, WorkType.Name, 
                                            AssetId FROM WorkOrder 
                                            WHERE Id = :wrapperRecord.recordId];

            //get the asset
            assetRecord =AssetSelector.getAssetBySerialNumber(wrapperRecord.serialNumber);

            if(wrapperRecord.bsl){
               
                //if asset is not found in the system in installation case then fetch the data from SAP
                if(assetRecord.size()==0){
                    //add the logic for SAP 
                    //SerialNumberValidationSAP.makeRequest();
                }

            }else{
                //in case of non bsl if asset is not found in the system then create new asset record using autogenerated serial number.
                if(assetRecord.size()==0){

                    String serialNumber = wrapperRecord.serialNumber;

                    if(wrapperRecord.serialNumber==null || wrapperRecord.serialNumber==''){
                        List<Autonumber_Serial_Number__c> Settings = [select id,Dummy_Serial_Number__c from Autonumber_Serial_Number__c Limit 1];                   
                        if(Settings.size()>0){
                            serialNumber = String.valueOf(Settings[0].Dummy_Serial_Number__c);
                            Settings[0].Dummy_Serial_Number__c +=1;
                            update Settings[0]; 
                        }
    
                    }
                   
                    Asset newAssetRecord = new Asset();
                    newAssetRecord.SerialNumber =serialNumber;
                    newAssetRecord.Non_BSl_Model_Make__c = wrapperRecord.nonBslMake;
                    newAssetRecord.non_Bsl_Model__c = wrapperRecord.nonBslModel;
                    newAssetRecord.AccountId = workOrderRecord.AccountId;
                    newAssetRecord.Type__c = wrapperRecord.nonBslType;
                    newAssetRecord.Name = newAssetRecord.Non_BSl_Model_Make__c + ' ' + newAssetRecord.SerialNumber;
                    newAssetRecord.Asset_Type__c = AssetConstant.TYPE_NONBSL;
    
                    insert newAssetRecord;
                    assetRecord.add(newAssetRecord);
                }
               
            }

            if(assetRecord.size()>0){

                Id AssetIdOnWorkOrder;
                for(Asset asst: assetRecord){
                    if(asst.ParentId!=null && asst.ParentId!= workOrderRecord.AssetId){
                        AssetIdOnWorkOrder = asst.ParentId;
                    }
                }
                if(AssetIdOnWorkOrder == null){
                    AssetIdOnWorkOrder = assetRecord[0].Id;
                }

                if(workOrderRecord.AssetId!=AssetIdOnWorkOrder){
                    workOrderRecord.AssetId = AssetIdOnWorkOrder;
                    update workOrderRecord;
    
                    Case caseRecord = new case(Id = workOrderRecord.CaseId, AssetId = AssetIdOnWorkOrder);
                    update caseRecord;
                }
                              
            }else{
                return 'Product information is not present in the system.';
            }

           return 'success';

        }catch(exception e){
            return 'An error has occured. Please contact your admin.';
        }
    }

    public class responseWrapper{
        @auraenabled
        public String recordId;
        @auraenabled
        public String serialNumber;
        @auraenabled
        public Boolean bsl;
        @auraenabled
        public String nonBslMake;
        @auraenabled
        public String nonBslModel;
        @auraenabled
        public String nonBslType;
        @auraenabled
        public String saId;
        @auraenabled
        public Boolean calledFromStartWork;
        @auraenabled
        public Decimal latitude;
        @auraenabled
        public Decimal longitude;
    }

}